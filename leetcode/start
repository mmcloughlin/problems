#!/usr/bin/env python3

import os
import sys

import requests

def question_data(title_slug):
    """
    Fetch question data from leetcode GraphQL API.
    """
    url = 'https://leetcode.com/graphql'
    payload = {
            "operationName":"questionData",
            "variables": {
                "titleSlug": title_slug,
            },
            "query": """query questionData($titleSlug: String!) {
                question(titleSlug: $titleSlug) {
                    questionId
                    title
                    titleSlug
                    content
                    difficulty
                    likes
                    dislikes
                    codeSnippets { lang langSlug code }
                }
            }""",
        }
    r = requests.post(url, json=payload)
    r.raise_for_status()
    return r.json()


def difficulty_badge(difficulty):
    subject = 'difficulty'
    status = difficulty.lower()
    color = {
            'easy': 'green',
            'medium': 'orange',
            'hard': 'red',
            }[status]
    return f'https://img.shields.io/badge/{subject}-{status}-{color}.svg'


def readme_content(question):
    params = dict(question)
    params['difficulty_badge'] = difficulty_badge(question['difficulty'])

    template  = '# [{title}](https://leetcode.com/problems/{titleSlug}/)\n'
    template += '<img src="{difficulty_badge}" alt="{difficulty}" />\n'
    template += '\n'
    template += '{content}\n'

    return template.format(**params)


def init_question(title_slug):
    """
    Create question directory with a README.
    """
    path = title_slug

    # Ensure the question directory exists.
    os.makedirs(path, exist_ok=True)

    # Fetch question data.
    response = question_data(title_slug)
    question = response['data']['question']

    # Write README.
    readme_path = os.path.join(path, 'README.md')
    content = readme_content(question)
    with open(readme_path, 'w') as f:
        f.write(content)


def main():
    title_slugs = sys.argv[1:]
    for title_slug in title_slugs:
        init_question(title_slug)


if __name__ == '__main__':
    main()
